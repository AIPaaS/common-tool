apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

compileJava.dependsOn clean

sourceCompatibility = 1.8

configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
	exclude group: 'log4j', module: 'log4j'
	exclude group: "org.slf4j", module: "slf4j-log4j12"
}

checkstyleMain {
	ignoreFailures = false
	reports {
		include ( '**/*.java')
		xml {
			destination = new File(rootDir, "reports/checkstyle/${project.name}.xml" )
		}
	}
	configFile = new File(rootDir, 'checkstyle.xml')
}

checkstyleTest {
	ignoreFailures = false
	reports {
		include ( '**/*.java')
		xml {
			destination = new File(rootDir, "reports/checkstyle/${project.name}_test.xml" )
		}
	}
	configFile = new File(rootDir, 'checkstyle.xml')
}

findbugsMain {
	ignoreFailures = true
	reports {
		include ( '**/*.java')
		xml {
			destination = new File(rootDir, "reports/findbugs/${project.name}.xml" )
		}
	}
	effort = "max"
	reportLevel = "high"
	omitVisitors = ["FindNonShortCircuit"]
}

findbugsTest {
	ignoreFailures = true
	reports {
		include ( '**/*.java')
		xml {
			destination = new File(rootDir, "reports/findbugs/${project.name}_test.xml" )
		}
	}
	effort = "max"
	reportLevel = "high"
	omitVisitors = ["FindNonShortCircuit"]
}

pmdMain {
	ignoreFailures = true
	reports {
		include ( '**/*.java')
		xml {
			destination = new File(rootDir, "reports/pmd/${project.name}.xml" )
		}
	}
}

pmdTest {
	ignoreFailures = true
	reports {
		include ( '**/*.java')
		xml {
			destination = new File(rootDir, "reports/pmd/${project.name}_test.xml" )
		}
	}
}

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

repositories { maven{ url "http://10.1.228.199:18081/nexus/content/groups/public/"
	} }

sourceSets {
	main {
		java { srcDirs = ['src/main/java']}
	}
}

ext {
	moduleName = "ipaas-common";
	moduleVersion = version != "unspecified"?version:'1.0'
	moduleMode = project.hasProperty('mode') ? project.getProperty('mode') : 'R'
	if(moduleMode == 'S'){
		moduleVersion = moduleVersion + "-SNAPSHOT";
	}
	publishSnapShotsURL="http://10.1.228.199:18081/nexus/content/repositories/snapshots/"
	publishReleaseURL="http://10.1.228.199:18081/nexus/content/repositories/releases/"
	builtBy="gradle 2.1"
}

group = 'com.ai'

dependencies{
	compile "org.apache.logging.log4j:log4j-core:2.11.2"
	compile "org.apache.logging.log4j:log4j-slf4j-impl:2.11.2"
	compile "org.apache.logging.log4j:log4j-1.2-api:2.11.2"

	compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9'
	compile group: 'cglib', name: 'cglib', version: '3.2.12'

	// https://mvnrepository.com/artifact/com.esotericsoftware/kryo
	compile group: 'com.esotericsoftware', name: 'kryo', version: '4.0.2'

	compile "de.javakaffee:kryo-serializers:0.45"

	compile 'commons-beanutils:commons-beanutils:1.9.3'
	compile group: 'org.apache.commons', name: 'commons-text', version: '1.6'

	
	compile 'org.apache.commons:commons-lang3:3.9'
	compile 'org.apache.httpcomponents:httpclient:4.5.9'
	compile 'org.bouncycastle:bcprov-jdk15on:1.62'


	// https://mvnrepository.com/artifact/com.google.guava/guava
	compile group: 'com.google.guava', name: 'guava', version: '28.0-jre'
	// https://mvnrepository.com/artifact/org.springframework/spring-beans
	compile group: 'org.springframework', name: 'spring-beans', version: '5.1.8.RELEASE'
	

	testCompile(
			"org.springframework:spring-test:5.1.8.RELEASE",
			"junit:junit:4.12"
	)
}


jar {

	println "Hello $moduleVersion"
	exclude('log4j2.xml')
	baseName moduleName
	version moduleVersion
	manifest {
		attributes 'packageName': moduleName, 'Built-By': builtBy,'create-date': new Date().format('yyyy-MM-dd HH:mm:ss')
	}
}


task sourcesJar(type: Jar, dependsOn: classes) {
	baseName moduleName
	version moduleVersion
	classifier = 'sources'
	from sourceSets.main.allSource
}
javadoc {
	exclude               "**/internal/**"
	failOnError				false
	options.memberLevel = JavadocMemberLevel.PUBLIC

	options.addStringOption("Xdoclint", "none")
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	baseName moduleName
	version moduleVersion
	classifier = 'javadoc'

	from javadoc.destinationDir
}



artifacts { archives sourcesJar }

publish.dependsOn build


publishing {
	publications {
		publishing.publications.create("${moduleName}", MavenPublication) {
			groupId group
			artifactId moduleName
			version moduleVersion
			artifact  jar

			artifact (sourcesJar) { classifier "sources" }

			pom.withXml {
				//Creating additional node for dependencies
				def dependenciesNode = asNode().appendNode('dependencies')

				//Defining configuration names from which dependencies will be taken (debugCompile or releaseCompile and compile)
				def configurationNames = ['compile']

				configurationNames.each { configurationName ->
					configurations[configurationName].allDependencies.each {
						if (it.group != null && it.name != null) {
							def dependencyNode = dependenciesNode.appendNode('dependency')
							dependencyNode.appendNode('groupId', it.group)
							dependencyNode.appendNode('artifactId', it.name)
							dependencyNode.appendNode('version', it.version)

							//If there are any exclusions in dependency
							if (it.excludeRules.size() > 0) {
								def exclusionsNode = dependencyNode.appendNode('exclusions')
								it.excludeRules.each { rule ->
									def exclusionNode = exclusionsNode.appendNode('exclusion')
									exclusionNode.appendNode('groupId', rule.group)
									exclusionNode.appendNode('artifactId', rule.module)
								}
							}
						}
					}
				}
			}
		}
	}
	repositories {
		maven {
			credentials {
				username = repoUser
				password = repoPassword
			}
			if(moduleVersion.endsWith('-SNAPSHOT')) {
				url publishSnapShotsURL
			} else {
				url publishReleaseURL
			}
		}
	}
}
